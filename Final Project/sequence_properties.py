#### USING ONLY python's STANDARD LIBRARY COMPLETE THE FOLLOWING CODE

#### There are 9 methods worth 75 points that you must write to gain 
#### full credit for the sequence_properties.py module. See below.

import math

# @param seq a list of numerical values 
# Precondition: the length of seq > 1 
# @return a list of numerical values with precision 5, 
# where the element at index k is equal to the 
# difference between the elements at indices k + 1 and k of seq. 
def getDiffs(seq):
	list = []
	for i in range(0, len(seq)-1):
		current = seq[i+1] - seq[i]	   
		current = round(current,6)
		list.append(current)
	return list

### YOU MUST USE THE getDiffs FUNCTION WHEN IMPLEMENTING THE ###
### isLinear FUNCTION ###
 
# @param seq a list of integer values 
# Precondition: seq.length > 1 
# @return true if seq is linear: that is the differences between all 
# consecutive pairs of elements in seq are identical; false otherwise.
def isLinear(seq):
	diffs = getDiffs(seq)
	if len(diffs) == 1:
		return True
	for i in range(0,len(diffs)-1):
		if diffs[i] != diffs[i-1]:
			return False
	return True

### YOU MUST USE THE getDiffs AND isLinear FUNCTIONS WHEN ###
### IMPLEMENTING THE isQuadratic FUNCTION
 
#@param seq a list of integer values 
#Precondition: seq.length > 2 
#@return true if seq is quadratic: that is the sequence is not linear, and
#the differences between all consecutive pairs of elements in seq form a 
#linear sequence; false otherwise. 
def isQuadratic(seq):
	secondDiff = getDiffs(getDiffs(seq))
	for i in range(0,len(secondDiff-1)):
		if secondDiff[i] != secondDiff[i+1]:
			return False
	return True
	
# @param seq a list of numerical values 
# Precondition: the length of seq > 1 
# @return a list of numerical values with precision 5, 
# where the element at index k is equal to the 
# quotients of the elements at indices k + 1 and k of seq  
def getRatios(seq):
	list = []
	for i in range(0,len(seq-1)):
		current = seq[i+1]/seq[i]
		current = round(current,5)
		list.append(current)
	return current
	
### YOU MUST USE THE getRatios FUNCTIONS WHEN ###
### IMPLEMENTING THE isGeometric FUNCTION

# @param seq a list of integer values 
# Precondition: seq.length > 2 
# @return true if seq is geometric: that is the ratios between all 
# consecutive pairs of elements in seq are identical to within
# five decimal places;false otherwise.
def isGeometric(seq):	
	list = getRatios(seq)
	for i in range(0,len(list)-1):
		if list[i] != list[i+1]:
			return False
	return True
	
# @param mx_plus_b a string containing a linear expression of the form 
# mx + b  
# Precondition: mx_plus_b must be a valid linear expression in the form
# mx + b 
# @return a list containing the slope m and vertical intercept b
# both as float values. The slope should be stored in the list first
# followed by the vertical intercept
def getLinearParameters(mx_plus_b):
	result = []
	tempList = mx_plus_b.split('+')
	for i in range(0,len(tempList[0])):
		if tempList[0][i] == 'x':
			result[0] = float(tempList[0][0:i])
	result[1] = float(tempList[1])
	return result

### YOU MUST USE THE getLinearParameters FUNCTION WHEN ###
### IMPLEMENTING THE linearTransformation FUNCTION	
# @params seq a list of numerical values, mx_plus_b a string containing 
# a linear expression of the form mx + b  
# Preconditions: the length of seq > 1, mx_plus_b must be a valid 
# linear expression in the form mx + b 
# @return a list containing values generated by multiplying each element
# of seq by the slope m followed by adding the vertical intercept b.
# For example, if seq = [2, 4, 8, 16], and mx_plus_b = "3x-4", then the 
# return list would be [2, 8, 20, 44]
def linearTransformation(seq, mx_plus_b):	
	line = linearTransformation(seq)[0]
	result = []
	for i in seq:
		result.append((i*line[0])+line[1])
	return result
	
### YOU MUST USE THE getLinearParameters FUNCTION WHEN ###
### IMPLEMENTING THE linearSequence FUNCTION
# @params num_terms the number of terms to generate, mx_plus_b a 
# string containing a linear expression of the form mx + b  
# Preconditions: num_terms > 1, mx_plus_b must be a valid 
# linear expression in the form mx + b 
# @return a list containing the terms of the linear sequence
def linearSequence(num_terms, mx_plus_b):
	line = getLinearEquation(mx_plus_b)
	result = []
	for i in range(0,num_terms):
		result.append((i*line[0])+line[1])
	return result

	
# @param seq a list of numerical values that form a linear sequence
# Precondition: seq.length > 1 
# @return a string in the form mx + b that defines the linear sequence
# For example, if seq = [3, 8, 13, 18], then the function would
# return "5x-2"
def getLinearEquation(seq):
	pass
	



	
